var documenterSearchIndex = {"docs":
[{"location":"man/reference.html#Types","page":"Reference","title":"Types","text":"","category":"section"},{"location":"man/reference.html","page":"Reference","title":"Reference","text":"Documentation of types.","category":"page"},{"location":"man/reference.html#Functions","page":"Reference","title":"Functions","text":"","category":"section"},{"location":"man/reference.html","page":"Reference","title":"Reference","text":"Documentation of functions.","category":"page"},{"location":"guide/guide.html#Guide","page":"How to guide","title":"Guide","text":"","category":"section"},{"location":"guide/guide.html","page":"How to guide","title":"How to guide","text":"The FinEtoolsFlexStructures package is used to solve static and dynamic linear and nonlinear  problems involving beams and linear static and dynamic analysis of shells.","category":"page"},{"location":"guide/guide.html","page":"How to guide","title":"How to guide","text":"The basic functionality is provided by the FinEtools package.","category":"page"},{"location":"guide/guide.html","page":"How to guide","title":"How to guide","text":"To understand how the package works, we would suggest inspecting the examples. The examples are organized by category: statics, dynamics, etc. There is usually an indication of what the correct answer should be (frequencies, deflections, buckling factors, ...). Many examples correspond to well-known benchmarks.","category":"page"},{"location":"index.html#FinEtoolsFlexStructures-Documentation","page":"Home","title":"FinEtoolsFlexStructures Documentation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"The tutorials are provided in the form of Julia scripts and Markdown files in a separate package. ","category":"page"},{"location":"index.html#Manual","page":"Home","title":"Manual","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"The description of the types and the functions, organized by module and/or other logical principle.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Pages = [\n    \"man/types.md\",\n    \"man/functions.md\",\n]\nDepth = 2","category":"page"},{"location":"man/types.html#Types","page":"Types","title":"Types","text":"","category":"section"},{"location":"man/types.html#Table-of-Contents","page":"Types","title":"Table of Contents","text":"","category":"section"},{"location":"man/types.html","page":"Types","title":"Types","text":"CompositeLayupModule types\nCrossSectionModule types\nMeshFrameMemberModule types\nRotUtilModule types\nTransformerModule types\nFESetL2BeamModule types\nFESetShellT3Module types\nFEMMCorotBeamModule types\nFEMMLinBeamModule types\nFEMMRITBeamModule types\nFEMMShellT3FFModule types\nFEMMShellT3FFCompModule types\nFEMMPointMassModule types\nFEMMPointGroundedSpringModule types","category":"page"},{"location":"man/types.html#CompositeLayupModule-types","page":"Types","title":"CompositeLayupModule types","text":"","category":"section"},{"location":"man/types.html","page":"Types","title":"Types","text":"Modules = [FinEtoolsFlexStructures.CompositeLayupModule]\nPrivate = true\nOrder = [:type]","category":"page"},{"location":"man/types.html#FinEtoolsFlexStructures.CompositeLayupModule.CompositeLayup","page":"Types","title":"FinEtoolsFlexStructures.CompositeLayupModule.CompositeLayup","text":"CompositeLayup\n\nType for composite layup.\n\n\n\n\n\n","category":"type"},{"location":"man/types.html#FinEtoolsFlexStructures.CompositeLayupModule.CompositeLayup-Tuple{Any, Any, Any}","page":"Types","title":"FinEtoolsFlexStructures.CompositeLayupModule.CompositeLayup","text":"CompositeLayup(name, plies, mcsys)\n\nCreate a composite layup.\n\nProvide the name, the array of plies, and the coordinate system that defines the orientation of the composite layup. The first base spector of this coordinate system is the reference direction for the layup.\n\n\n\n\n\n","category":"method"},{"location":"man/types.html#FinEtoolsFlexStructures.CompositeLayupModule.Ply","page":"Types","title":"FinEtoolsFlexStructures.CompositeLayupModule.Ply","text":"Ply{M} <: AbstractPly\n\nType of a ply.\n\n\n\n\n\n","category":"type"},{"location":"man/types.html#FinEtoolsFlexStructures.CompositeLayupModule.Ply-Union{Tuple{M}, Tuple{Any, M, Any, Any}} where M","page":"Types","title":"FinEtoolsFlexStructures.CompositeLayupModule.Ply","text":"Ply{M} <: AbstractPly\n\nCreate a ply.\n\nProvide name, material of the ply, thickness of the ply, an angle between the first bases vector of the layup coordinate system and the first direction of the ply material coordinate system.\n\n\n\n\n\n","category":"method"},{"location":"man/types.html#CrossSectionModule-types","page":"Types","title":"CrossSectionModule types","text":"","category":"section"},{"location":"man/types.html","page":"Types","title":"Types","text":"Modules = [FinEtoolsFlexStructures.CrossSectionModule]\nPrivate = true\nOrder = [:type]","category":"page"},{"location":"man/types.html#FinEtoolsFlexStructures.CrossSectionModule.CrossSectionCircle-Tuple{Any, Any, Any}","page":"Types","title":"FinEtoolsFlexStructures.CrossSectionModule.CrossSectionCircle","text":"CrossSectionCircle(radius, x1x2_vector, shear_resisting_area_factor = 6/7; label = 0)\n\nCreate a circular section for use with a Timoshenko model.\n\nCommonly accepted value is shear_resisting_area_factor = 6/7.\n\n\n\n\n\n","category":"method"},{"location":"man/types.html#FinEtoolsFlexStructures.CrossSectionModule.CrossSectionCircle-Tuple{Any, Any}","page":"Types","title":"FinEtoolsFlexStructures.CrossSectionModule.CrossSectionCircle","text":"CrossSectionCircle(radius, x1x2_vector; label = 0)\n\nCreate a circular section for use with a Bernoulli model.\n\n\n\n\n\n","category":"method"},{"location":"man/types.html#FinEtoolsFlexStructures.CrossSectionModule.CrossSectionRectangle-NTuple{4, Any}","page":"Types","title":"FinEtoolsFlexStructures.CrossSectionModule.CrossSectionRectangle","text":"CrossSectionRectangle(d2f, d3f, x1x2_vector; label = 0)\n\nCreate a rectangular section for use with a Timoshenko model.\n\nCommonly accepted value is shear_resisting_area_factor = 5/6.\n\n\n\n\n\n","category":"method"},{"location":"man/types.html#FinEtoolsFlexStructures.CrossSectionModule.CrossSectionRectangle-Tuple{Any, Any, Any}","page":"Types","title":"FinEtoolsFlexStructures.CrossSectionModule.CrossSectionRectangle","text":"CrossSectionRectangle(d2f, d3f, x1x2_vector; label = 0)\n\nCreate a rectangular section for use with a Bernoulli model.\n\n\n\n\n\n","category":"method"},{"location":"man/types.html#MeshFrameMemberModule-types","page":"Types","title":"MeshFrameMemberModule types","text":"","category":"section"},{"location":"man/types.html","page":"Types","title":"Types","text":"Modules = [FinEtoolsFlexStructures.MeshFrameMemberModule]\nPrivate = true\nOrder = [:type]","category":"page"},{"location":"man/types.html#RotUtilModule-types","page":"Types","title":"RotUtilModule types","text":"","category":"section"},{"location":"man/types.html","page":"Types","title":"Types","text":"Modules = [FinEtoolsFlexStructures.RotUtilModule]\nPrivate = true\nOrder = [:type]","category":"page"},{"location":"man/types.html#TransformerModule-types","page":"Types","title":"TransformerModule types","text":"","category":"section"},{"location":"man/types.html","page":"Types","title":"Types","text":"Modules = [FinEtoolsFlexStructures.TransformerModule]\nPrivate = true\nOrder = [:type]","category":"page"},{"location":"man/types.html#FinEtoolsFlexStructures.TransformerModule.QTEQTransformer","page":"Types","title":"FinEtoolsFlexStructures.TransformerModule.QTEQTransformer","text":"QTEQTransformer\n\nQTEQTransformer of element matrices.\n\nA callable object: computes Q^T * E * Q, where E the element stiffness matrix, and Q is the transformation matrix.\n\nBuffers the intermediate result. Hence no allocation is incurred.\n\n\n\n\n\n","category":"type"},{"location":"man/types.html#FinEtoolsFlexStructures.TransformerModule.QTEQTransformer-Tuple{Any, Any}","page":"Types","title":"FinEtoolsFlexStructures.TransformerModule.QTEQTransformer","text":"(o::QTEQTransformer)(E, Q)\n\nPerform the transformation on the matrix E with the transformation matrix Q: Ebar = Q^T * E * Q.\n\n\n\n\n\n","category":"method"},{"location":"man/types.html#FESetL2BeamModule-types","page":"Types","title":"FESetL2BeamModule types","text":"","category":"section"},{"location":"man/types.html","page":"Types","title":"Types","text":"Modules = [FinEtoolsFlexStructures.FESetL2BeamModule]\nPrivate = true\nOrder = [:type]","category":"page"},{"location":"man/types.html#FinEtoolsFlexStructures.FESetL2BeamModule.FESetL2Beam","page":"Types","title":"FinEtoolsFlexStructures.FESetL2BeamModule.FESetL2Beam","text":"mutable struct FESetL2Beam{CT} <: AbstractFESet1Manifold{2}\n\nType of a two-node beam finite element set.\n\nThe elements in the set have the same cross section type, but since the cross section dimensions may depend on the coordinate, each individual element may have a different area, second moments of area, etc.\n\n\n\n\n\n","category":"type"},{"location":"man/types.html#FinEtoolsFlexStructures.FESetL2BeamModule.FESetL2Beam-Union{Tuple{CT}, Tuple{IT}, Tuple{IT, CT}} where {IT<:Integer, CT}","page":"Types","title":"FinEtoolsFlexStructures.FESetL2BeamModule.FESetL2Beam","text":"FESetL2Beam(N::IT, crosssection::CT) where {IT<:Integer, CT}\n\nConstructor.\n\nSupply the total number of elements in the set, and the cross-section definition. The parameters of the section are assumed to be uniform along the set of the beam elements.\n\n\n\n\n\n","category":"method"},{"location":"man/types.html#FESetShellT3Module-types","page":"Types","title":"FESetShellT3Module types","text":"","category":"section"},{"location":"man/types.html","page":"Types","title":"Types","text":"Modules = [FinEtoolsFlexStructures.FESetShellT3Module]\nPrivate = true\nOrder = [:type]","category":"page"},{"location":"man/types.html#FinEtoolsFlexStructures.FESetShellT3Module.FESetShellT3","page":"Types","title":"FinEtoolsFlexStructures.FESetShellT3Module.FESetShellT3","text":"struct FESetShellT3 <: AbstractFESet2Manifold{3}\n\nType of a finite element set for the three-node shell.\n\n\n\n\n\n","category":"type"},{"location":"man/types.html#FEMMCorotBeamModule-types","page":"Types","title":"FEMMCorotBeamModule types","text":"","category":"section"},{"location":"man/types.html","page":"Types","title":"Types","text":"Modules = [FinEtoolsFlexStructures.FEMMCorotBeamModule]\nPrivate = true\nOrder = [:type]","category":"page"},{"location":"man/types.html#FinEtoolsFlexStructures.FEMMCorotBeamModule.FEMMCorotBeam","page":"Types","title":"FinEtoolsFlexStructures.FEMMCorotBeamModule.FEMMCorotBeam","text":"FEMMCorotBeam{S<:FESetL2, F<:Function} <: AbstractFEMM\n\nType for co-rotational beam finite element modeling machine (FEMM).\n\n\n\n\n\n","category":"type"},{"location":"man/types.html#FinEtoolsFlexStructures.FEMMCorotBeamModule.FEMMCorotBeam-Union{Tuple{F}, Tuple{S}, Tuple{FinEtools.IntegDomainModule.IntegDomain{S, F}, FinEtoolsDeforLinear.MatDeforElastIsoModule.MatDeforElastIso}} where {S<:FinEtools.FESetModule.FESetL2, F<:Function}","page":"Types","title":"FinEtoolsFlexStructures.FEMMCorotBeamModule.FEMMCorotBeam","text":"FEMMCorotBeam(integdomain::IntegDomain{S, F}, material::MatDeforElastIso) where {S<:FESetL2, F<:Function}\n\nConstructor.\n\nSupply the integration domain and the material.\n\n\n\n\n\n","category":"method"},{"location":"man/types.html#FEMMLinBeamModule-types","page":"Types","title":"FEMMLinBeamModule types","text":"","category":"section"},{"location":"man/types.html","page":"Types","title":"Types","text":"Modules = [FinEtoolsFlexStructures.FEMMLinBeamModule]\nPrivate = true\nOrder = [:type]","category":"page"},{"location":"man/types.html#FinEtoolsFlexStructures.FEMMLinBeamModule.FEMMLinBeam","page":"Types","title":"FinEtoolsFlexStructures.FEMMLinBeamModule.FEMMLinBeam","text":"FEMMLinBeam{S<:FESetL2, F<:Function} <: AbstractFEMM\n\nType for linear beam finite element modeling machine.\n\nThe beam can be connected to the nodes with given eccentricities (the transverse eccentricity is uniform along its length). Only linear kinematics is implemented at the moment. The beam stiffness can be either shear-flexible (Timoshenko), or shear-rigid (Bernoulli-Euler). The local beam stiffness is expressed analytically: no numerical integration is involved.\n\n\n\n\n\n","category":"type"},{"location":"man/types.html#FinEtoolsFlexStructures.FEMMLinBeamModule.FEMMLinBeam-Union{Tuple{F}, Tuple{S}, Tuple{FinEtools.IntegDomainModule.IntegDomain{S, F}, FinEtoolsDeforLinear.MatDeforElastIsoModule.MatDeforElastIso, Any}} where {S<:FinEtools.FESetModule.FESetL2, F<:Function}","page":"Types","title":"FinEtoolsFlexStructures.FEMMLinBeamModule.FEMMLinBeam","text":"FEMMLinBeam(integdomain::IntegDomain{S, F}, material::MatDeforElastIso,  uniform_eccentricity) where {S<:FESetL2, F<:Function}\n\nConstructor.\n\nSupply the integration domain, material, and the eccentricity parameters (given in the order: first node, f1 direction, second node, f1 direction, f2 direction, f3 direction).\n\n\n\n\n\n","category":"method"},{"location":"man/types.html#FinEtoolsFlexStructures.FEMMLinBeamModule.FEMMLinBeam-Union{Tuple{F}, Tuple{S}, Tuple{FinEtools.IntegDomainModule.IntegDomain{S, F}, FinEtoolsDeforLinear.MatDeforElastIsoModule.MatDeforElastIso}} where {S<:FinEtools.FESetModule.FESetL2, F<:Function}","page":"Types","title":"FinEtoolsFlexStructures.FEMMLinBeamModule.FEMMLinBeam","text":"FEMMLinBeam(integdomain::IntegDomain{S, F}, material::MatDeforElastIso) where {S<:FESetL2, F<:Function}\n\nConstructor.\n\nSupply the integration domain and the material. The eccentricities are assumed to be zero.\n\n\n\n\n\n","category":"method"},{"location":"man/types.html#FEMMRITBeamModule-types","page":"Types","title":"FEMMRITBeamModule types","text":"","category":"section"},{"location":"man/types.html","page":"Types","title":"Types","text":"Modules = [FinEtoolsFlexStructures.FEMMRITBeamModule]\nPrivate = true\nOrder = [:type]","category":"page"},{"location":"man/types.html#FinEtoolsFlexStructures.FEMMRITBeamModule.FEMMRITBeam","page":"Types","title":"FinEtoolsFlexStructures.FEMMRITBeamModule.FEMMRITBeam","text":"FEMMRITBeam{S<:FESetL2, F<:Function} <: AbstractFEMM\n\nType for linear reduced-integration beam finite element modeling machine.\n\nOnly linear kinematics is implemented at the moment, and only linear basis functions are available (i.e. it is a two-node element). The beam stiffness is shear-flexible(Timoshenko). The local beam stiffness is expressed analytically: the one-point numerical integration is hardwired.\n\n\n\n\n\n","category":"type"},{"location":"man/types.html#FinEtoolsFlexStructures.FEMMRITBeamModule.FEMMRITBeam-Union{Tuple{F}, Tuple{S}, Tuple{FinEtools.IntegDomainModule.IntegDomain{S, F}, FinEtoolsDeforLinear.MatDeforElastIsoModule.MatDeforElastIso}} where {S<:FinEtools.FESetModule.FESetL2, F<:Function}","page":"Types","title":"FinEtoolsFlexStructures.FEMMRITBeamModule.FEMMRITBeam","text":"FEMMRITBeam(integdomain::IntegDomain{S, F}, material::MatDeforElastIso) where {S<:FESetL2, F<:Function}\n\nConstructor.\n\nSupply integration domain (mesh) and the material.\n\n\n\n\n\n","category":"method"},{"location":"man/types.html#FEMMShellT3FFModule-types","page":"Types","title":"FEMMShellT3FFModule types","text":"","category":"section"},{"location":"man/types.html","page":"Types","title":"Types","text":"Modules = [FinEtoolsFlexStructures.FEMMShellT3FFModule]\nPrivate = true\nOrder = [:type]","category":"page"},{"location":"man/types.html#FinEtoolsFlexStructures.FEMMShellT3FFModule.FEMMShellT3FF","page":"Types","title":"FinEtoolsFlexStructures.FEMMShellT3FFModule.FEMMShellT3FF","text":"FEMMShellT3FF{S<:FESetT3, F<:Function} <: AbstractFEMM\n\nType for the finite element modeling machine of the T3 triangular Flat-Facet shell with the Discrete Shear Gap technology and a consistent handling of the normals. \n\nWith averaging of the transverse strain-displacement matrix or averaging of the transverse shear stiffness matrix to provide isotropic transverse shear response. \n\nAlso, the formulation is developed to correctly handle the coupling of twisting moments and transverse shear (such as in the twisted beam or the Raasch hook problems) by incorporating \"nodal\" normals.\n\nSome of the programming developed consistently with the paper\n\n[1] Cui et al, Analysis of plates and shells using an edge-based smoothed finite element method, Comput Mech (2010) 45:141–156 DOI 10.1007/s00466-009-0429-9\n\nThe stabilization factor of the shear term of\n\n[2] Mikko Lyly, Rolf Stenberg and Teemu Vihinen, A stable bilinear element for the Reissner-Mindlin plate model Computer Methods in Applied Mechanics and Engineering 110 (1993) 343-357 \n\nis incorporated. Refer to expressions (3.12) and (3.13).\n\nThe treatment of the transformation between the element and nodal coordinates is carried out using a clean alternative to the publication\n\n[3] Finite Elements in Analysis and Design 30 (1998) 235—242 The treatment of shell normals in ﬁnite element analysis Richard H. MacNeal, Charles T. Wilson, Robert L. Harder, Claus C. Hoﬀ The MacNeal-Schwendler Corporation, 815 Colorado Blvd., Los Angeles, CA 90041, USA\n\nThe formula for the element to nodal basis transformation is derived from the expression\n\n[theta]_n = [A]_E^T [theta]_e + [A_3,1:3]_E^T [alpha_3]_e\n\nby disconnecting the drilling degree of freedom from the bending degrees of freedom in the nodal basis.\n\nThe following features are incorporated to deal with nodal normals:\n\nNodal normals are averages of the normals of elements that meet at a node.\nA crease in the surface is taken into account. In that case the normal are not averaged across the crease. At the nodes along the crease every element uses the normal to its surface instead of the nodal normal.\n\nConfiguration:\n\nThese attributes of the FEMM can be set after it's been created.\n\ntransv_shear_formulation: which formulation for the transverse shear stiffness? \nFEMMShellT3FFModule.__TRANSV_SHEAR_FORMULATION_AVERAGE_B - averaged strains (default)\nFEMMShellT3FFModule.__TRANSV_SHEAR_FORMULATION_AVERAGE_K - averaged stiffness\ndrilling_stiffness_scale: multiplier of the generalized stiffness coefficient\nthreshold_angle: angle in degrees. If a nodal normal subtends angle bigger then this threshold, the nodal normal at that note is marked as invalid.\nmult_el_size: multiplier of the square of the element size, used to control transverse shear stiffness.\n\n\n\n\n\n","category":"type"},{"location":"man/types.html#FinEtoolsFlexStructures.FEMMShellT3FFModule.FEMMShellT3FF-Union{Tuple{M}, Tuple{F}, Tuple{S}, Tuple{FinEtools.IntegDomainModule.IntegDomain{S, F}, FinEtools.CSysModule.CSys, M}} where {S<:FinEtools.FESetModule.FESetT3, F<:Function, M}","page":"Types","title":"FinEtoolsFlexStructures.FEMMShellT3FFModule.FEMMShellT3FF","text":"FEMMShellT3FF(integdomain::IntegDomain{S, F}, mcsys::CSys, material::M) where {S<:FESetT3, F<:Function, M}\n\nConstructor of the T3FF shell FEMM.\n\n\n\n\n\n","category":"method"},{"location":"man/types.html#FEMMShellT3FFCompModule-types","page":"Types","title":"FEMMShellT3FFCompModule types","text":"","category":"section"},{"location":"man/types.html","page":"Types","title":"Types","text":"Modules = [FinEtoolsFlexStructures.FEMMShellT3FFCompModule]\nPrivate = true\nOrder = [:type]","category":"page"},{"location":"man/types.html#FinEtoolsFlexStructures.FEMMShellT3FFCompModule.FEMMShellT3FFComp","page":"Types","title":"FinEtoolsFlexStructures.FEMMShellT3FFCompModule.FEMMShellT3FFComp","text":"FEMMShellT3FFComp{S<:FESetT3, F<:Function} <: AbstractFEMM\n\nType for the finite element modeling machine of the T3 triangular Flat-Facet shell with the Discrete Shear Gap technology and a consistent handling of the normals. This formulation is suitable for modelling of COMPOSITE (layered) materials. \n\nFor details for the homogeneous-shell refer to FEMMShellT3FF.\n\n\n\n\n\n","category":"type"},{"location":"man/types.html#FinEtoolsFlexStructures.FEMMShellT3FFCompModule.FEMMShellT3FFComp-Union{Tuple{F}, Tuple{S}, Tuple{FinEtools.IntegDomainModule.IntegDomain{S, F}, FinEtoolsFlexStructures.CompositeLayupModule.CompositeLayup}} where {S<:FinEtools.FESetModule.FESetT3, F<:Function}","page":"Types","title":"FinEtoolsFlexStructures.FEMMShellT3FFCompModule.FEMMShellT3FFComp","text":"FEMMShellT3FFComp(integdomain::IntegDomain{S, F}, layup::CompositeLayup) where {S<:FESetT3, F<:Function}\n\nConstructor of the T3FFComp shell FEMM. All elements use a single layup.\n\n\n\n\n\n","category":"method"},{"location":"man/types.html#FEMMPointMassModule-types","page":"Types","title":"FEMMPointMassModule types","text":"","category":"section"},{"location":"man/types.html","page":"Types","title":"Types","text":"Modules = [FinEtoolsFlexStructures.FEMMPointMassModule]\nPrivate = true\nOrder = [:type]","category":"page"},{"location":"man/types.html#FinEtoolsFlexStructures.FEMMPointMassModule.FEMMPointMass","page":"Types","title":"FinEtoolsFlexStructures.FEMMPointMassModule.FEMMPointMass","text":"FEMMPointMass{S<:AbstractFESet}\n\nType for linear deformation finite element modeling machine.\n\n\n\n\n\n","category":"type"},{"location":"man/types.html#FEMMPointGroundedSpringModule-types","page":"Types","title":"FEMMPointGroundedSpringModule types","text":"","category":"section"},{"location":"man/types.html","page":"Types","title":"Types","text":"Modules = [FinEtoolsFlexStructures.FEMMPointGroundedSpringModule]\nPrivate = true\nOrder = [:type]","category":"page"},{"location":"man/types.html#FinEtoolsFlexStructures.FEMMPointGroundedSpringModule.FEMMPointGroundedSpring","page":"Types","title":"FinEtoolsFlexStructures.FEMMPointGroundedSpringModule.FEMMPointGroundedSpring","text":"FEMMPointGroundedSpring{S<:AbstractFESet}\n\nType for finite element modeling machine for grounded springs.\n\n\n\n\n\n","category":"type"},{"location":"man/functions.html#Functions","page":"Functions","title":"Functions","text":"","category":"section"},{"location":"man/functions.html#Table-of-Contents","page":"Functions","title":"Table of Contents","text":"","category":"section"},{"location":"man/functions.html","page":"Functions","title":"Functions","text":"CompositeLayupModule functions\nCrossSectionModule functions\nMeshFrameMemberModule functions\nRotUtilModule functions\nTransformerModule functions\nFESetL2BeamModule functions\nFESetShellT3Module functions\nFEMMCorotBeamModule functions\nFEMMLinBeamModule functions\nFEMMRITBeamModule functions\nFEMMShellT3FFModule functions\nFEMMShellT3FFCompModule functions\nFEMMPointMassModule functions\nFEMMPointGroundedSpringModule functions","category":"page"},{"location":"man/functions.html#CompositeLayupModule-functions","page":"Functions","title":"CompositeLayupModule functions","text":"","category":"section"},{"location":"man/functions.html","page":"Functions","title":"Functions","text":"Modules = [FinEtoolsFlexStructures.CompositeLayupModule]\nPrivate = true\nOrder = [:function]","category":"page"},{"location":"man/functions.html#FinEtoolsFlexStructures.CompositeLayupModule.cartesian_csys-Tuple{Any}","page":"Functions","title":"FinEtoolsFlexStructures.CompositeLayupModule.cartesian_csys","text":"cartesian_csys(axes)\n\nCreate a material Cartesian coordinate system.\n\naxes = tuple of signed labels of the axes. For instance, (1, 2, 3) creates a coordinate system identical to the global cartesian coordinate system. (2, 1, -3) creates a coordinate system so that the first material basis vector is along the second global basis vector, the second material basis vector is along the first global basis vector, and the third material basis vector is opposite to the third global basis vector.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.CompositeLayupModule.lamina_material-NTuple{6, Any}","page":"Functions","title":"FinEtoolsFlexStructures.CompositeLayupModule.lamina_material","text":"lamina_material(E1, E2, nu12, G12, G13, G23)\n\nCreate a transversely isotropic lamina material with default (zero) mass density.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.CompositeLayupModule.lamina_material-NTuple{7, Any}","page":"Functions","title":"FinEtoolsFlexStructures.CompositeLayupModule.lamina_material","text":"lamina_material(rho, E1, E2, nu12, G12, G13, G23)\n\nCreate a transversely isotropic lamina material.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.CompositeLayupModule.lamina_material-Tuple{Any, Any, Any}","page":"Functions","title":"FinEtoolsFlexStructures.CompositeLayupModule.lamina_material","text":"lamina_material(rho, E, nu)\n\nCreate an isotropic lamina material.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.CompositeLayupModule.lamina_material-Tuple{Any, Any}","page":"Functions","title":"FinEtoolsFlexStructures.CompositeLayupModule.lamina_material","text":"lamina_material(E, nu)\n\nCreate an isotropic lamina material with default (zero) mass density.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.CompositeLayupModule.laminate_inertia!-Tuple{FinEtoolsFlexStructures.CompositeLayupModule.CompositeLayup}","page":"Functions","title":"FinEtoolsFlexStructures.CompositeLayupModule.laminate_inertia!","text":"laminate_inertia!(cl::CompositeLayup)\n\nCompute the laminate inertia.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.CompositeLayupModule.laminate_stiffnesses!-Tuple{FinEtoolsFlexStructures.CompositeLayupModule.CompositeLayup, Any, Any, Any}","page":"Functions","title":"FinEtoolsFlexStructures.CompositeLayupModule.laminate_stiffnesses!","text":"laminate_stiffnesses!(cl::CompositeLayup, A, B, D)\n\nCompute the laminate stiffness matrices, membrane, extension-bending coupling, and bending.\n\nA, B, and D are the familiar 3x3 matrices: Aij coefficients represent in-plane stiffness of the laminate, the Dij coefficients represent bending stiffness, the Bij represent bending-extension coupling.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.CompositeLayupModule.laminate_transverse_stiffness!-Tuple{FinEtoolsFlexStructures.CompositeLayupModule.CompositeLayup, Any}","page":"Functions","title":"FinEtoolsFlexStructures.CompositeLayupModule.laminate_transverse_stiffness!","text":"laminate_transverse_stiffness!(cl::CompositeLayup, H)\n\nCompute the laminate transverse stiffness.\n\nHij represent intralaminar shear stiffness.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.CompositeLayupModule.plane_stress_T_matrix!-Union{Tuple{T}, Tuple{Matrix{T}, Any}} where T","page":"Functions","title":"FinEtoolsFlexStructures.CompositeLayupModule.plane_stress_T_matrix!","text":"plane_stress_T_matrix!(Tm::Array{T, 2}, angle) where {T}\n\nCompute the transformation matrix of stress vector components FROM the PLY coordinate system TO the LAYOUT coordinate system.\n\nangle = angle (in radians) between the first basis vector of the layup     coordinate system and the first basis vector of the ply coordinate system m, n = cosine and sine of the angle\n\nThe nomenclature is from Barbero, Finite element analysis of composite materials using Abaqus (2013).\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.CompositeLayupModule.plane_stress_Tbar_matrix!-Union{Tuple{T}, Tuple{Matrix{T}, Any}} where T","page":"Functions","title":"FinEtoolsFlexStructures.CompositeLayupModule.plane_stress_Tbar_matrix!","text":"plane_stress_Tbar_matrix!(Tm::Array{T, 2}, angle) where {T}\nplane_stress_Tbar_matrix!(Tm::Array{T, 2}, m, n) where {T}\n\nCompute the transformation matrix of engineering strain components FROM the LAYUP coordinate system TO the PLY coordinate system.\n\nangle = angle (in radians) between the first basis vector of the layup     coordinate system and the first basis vector of the ply coordinate system m, n = cosine and sine of the angle\n\nThe nomenclature is from Barbero, Finite element analysis of composite materials using Abaqus (2013).\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.CompositeLayupModule.plane_stress_Tinv_matrix!-Union{Tuple{T}, Tuple{Matrix{T}, Any}} where T","page":"Functions","title":"FinEtoolsFlexStructures.CompositeLayupModule.plane_stress_Tinv_matrix!","text":"plane_stress_Tinv_matrix!(Tinvm::Array{T, 2}, angle) where {T}\nplane_stress_Tinv_matrix!(Tinvm::Array{T, 2}, m, n) where {T}\n\nCompute the transformation matrix of the stress vector components FROM the LAYOUT coordinate system TO the PLY coordinate system.\n\nangle = angle (in radians) between the first basis vector of the layup     coordinate system and the first basis vector of the ply coordinate system m, n = cosine and sine of the angle\n\nThe nomenclature is from Barbero, Finite element analysis of composite materials using Abaqus (2013).\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.CompositeLayupModule.thickness-Tuple{FinEtoolsFlexStructures.CompositeLayupModule.CompositeLayup}","page":"Functions","title":"FinEtoolsFlexStructures.CompositeLayupModule.thickness","text":"thickness(cl::CompositeLayup)\n\nCompute the thickness of the layup (some of the thicknesses of the plies).\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.CompositeLayupModule.transverse_shear_T_matrix!-Union{Tuple{T}, Tuple{Matrix{T}, Any}} where T","page":"Functions","title":"FinEtoolsFlexStructures.CompositeLayupModule.transverse_shear_T_matrix!","text":"transverse_shear_T_matrix!(Tm::Array{T, 2}, angle) where {T}\ntransverse_shear_T_matrix!(Tm::Array{T, 2}, m, n) where {T}\n\nCompute the transformation matrix for the transverse shear stresses  FROM the LAYOUT coordinate system TO the PLY coordinate system.\n\nangle = angle (in radians) between the first basis vector of the layup     coordinate system and the first basis vector of the ply coordinate system m, n = cosine and sine of the angle\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#CrossSectionModule-functions","page":"Functions","title":"CrossSectionModule functions","text":"","category":"section"},{"location":"man/functions.html","page":"Functions","title":"Functions","text":"Modules = [FinEtoolsFlexStructures.CrossSectionModule]\nPrivate = true\nOrder = [:function]","category":"page"},{"location":"man/functions.html#MeshFrameMemberModule-functions","page":"Functions","title":"MeshFrameMemberModule functions","text":"","category":"section"},{"location":"man/functions.html","page":"Functions","title":"Functions","text":"Modules = [FinEtoolsFlexStructures.MeshFrameMemberModule]\nPrivate = true\nOrder = [:function]","category":"page"},{"location":"man/functions.html#FinEtoolsFlexStructures.MeshFrameMemberModule.frame_member-Tuple{Any, Any, Any}","page":"Functions","title":"FinEtoolsFlexStructures.MeshFrameMemberModule.frame_member","text":"frame_member(xyz, nL, crosssection; label = 0)\n\nMesh of a generally curved beam member given by the location of the vertices of the spline curve.\n\nnL = number of elements\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.MeshFrameMemberModule.fuse_members-Tuple{Any}","page":"Functions","title":"FinEtoolsFlexStructures.MeshFrameMemberModule.fuse_members","text":"fuse_members(members; tolerance = 0.001)\n\nFuse members by merging the meshes for the members.\n\nComputes an array of meshes.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.MeshFrameMemberModule.merge_members-Tuple{Any}","page":"Functions","title":"FinEtoolsFlexStructures.MeshFrameMemberModule.merge_members","text":"merge_members(members; tolerance = 0.001)\n\nMerge together meshes of the members.\n\nUses fuse_members to merge the nodes, then concatenates the finite elements.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#RotUtilModule-functions","page":"Functions","title":"RotUtilModule functions","text":"","category":"section"},{"location":"man/functions.html","page":"Functions","title":"Functions","text":"Modules = [FinEtoolsFlexStructures.RotUtilModule]\nPrivate = true\nOrder = [:function]","category":"page"},{"location":"man/functions.html#FinEtoolsFlexStructures.RotUtilModule.initial_Rfield-Tuple{Any}","page":"Functions","title":"FinEtoolsFlexStructures.RotUtilModule.initial_Rfield","text":"initial_Rfield(fens)\n\nSet up initial rotation field (rotation matrices are all identities)\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.RotUtilModule.update_rotation_field!-Tuple{Any, Any}","page":"Functions","title":"FinEtoolsFlexStructures.RotUtilModule.update_rotation_field!","text":"update_rotation_field!(Rfield, dchi)\n\nUpdate rotation field by exponential incremental rotation. \n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#TransformerModule-functions","page":"Functions","title":"TransformerModule functions","text":"","category":"section"},{"location":"man/functions.html","page":"Functions","title":"Functions","text":"Modules = [FinEtoolsFlexStructures.TransformerModule]\nPrivate = true\nOrder = [:function]","category":"page"},{"location":"man/functions.html#FESetL2BeamModule-functions","page":"Functions","title":"FESetL2BeamModule functions","text":"","category":"section"},{"location":"man/functions.html","page":"Functions","title":"Functions","text":"Modules = [FinEtoolsFlexStructures.FESetL2BeamModule]\nPrivate = true\nOrder = [:function]","category":"page"},{"location":"man/functions.html#Base.cat-Union{Tuple{T}, Tuple{T, T}} where T<:FinEtoolsFlexStructures.FESetL2BeamModule.FESetL2Beam","page":"Functions","title":"Base.cat","text":"cat(self::T,  other::T) where {T<:FESetL2Beam}\n\nConcatenate two sets of beam elements.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtools.FESetModule.subset-Union{Tuple{IT}, Tuple{T}, Tuple{T, IT}} where {T<:FinEtoolsFlexStructures.FESetL2BeamModule.FESetL2Beam, IT}","page":"Functions","title":"FinEtools.FESetModule.subset","text":"subset(self::T, L::IT) where {T<:FESetL2Beam, IT}\n\nSubset of a beam-element set.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FESetShellT3Module-functions","page":"Functions","title":"FESetShellT3Module functions","text":"","category":"section"},{"location":"man/functions.html","page":"Functions","title":"Functions","text":"Modules = [FinEtoolsFlexStructures.FESetShellT3Module]\nPrivate = true\nOrder = [:function]","category":"page"},{"location":"man/functions.html#FEMMCorotBeamModule-functions","page":"Functions","title":"FEMMCorotBeamModule functions","text":"","category":"section"},{"location":"man/functions.html","page":"Functions","title":"Functions","text":"Modules = [FinEtoolsFlexStructures.FEMMCorotBeamModule]\nPrivate = true\nOrder = [:function]","category":"page"},{"location":"man/functions.html#FinEtoolsFlexStructures.FEMMCorotBeamModule.current_local_frame!-NTuple{4, Any}","page":"Functions","title":"FinEtoolsFlexStructures.FEMMCorotBeamModule.current_local_frame!","text":"current_local_frame!(Ft, xt, FtI, FtJ)\n\nCompute the current local frame from the positions of the nodes and the orientation matrices (frames) at the nodes.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.FEMMCorotBeamModule.distribloads_global-Union{Tuple{TI}, Tuple{T}, Tuple{ASS}, Tuple{FinEtoolsFlexStructures.FEMMCorotBeamModule.FEMMCorotBeam, ASS, FinEtools.NodalFieldModule.NodalField{Float64}, FinEtools.NodalFieldModule.NodalField{T}, FinEtools.NodalFieldModule.NodalField{T}, FinEtools.NodalFieldModule.NodalField{TI}, Any}} where {ASS<:FinEtools.AssemblyModule.AbstractSysvecAssembler, T<:Number, TI<:Number}","page":"Functions","title":"FinEtoolsFlexStructures.FEMMCorotBeamModule.distribloads_global","text":"distribloads_global(self::FEMMCorotBeam, geom0::NodalField{FFlt}, u1::NodalField{T}, Rfield1::NodalField{T}, dchi::NodalField{T}, fi) where {T<:Number}\n\nCompute the load vector due to distributed loads.\n\nCompute the global load vector corresponding to applied distributed load. Here it means force per unit length of the beam, in the configuration u1, Rfield1. These are only forces, not moments.\n\nnote: Note\nThe force intensity must be uniform across the entire element. The force intensity is given in the global coordinates.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.FEMMCorotBeamModule.geostiffness-Union{Tuple{TI}, Tuple{T}, Tuple{ASS}, Tuple{FinEtoolsFlexStructures.FEMMCorotBeamModule.FEMMCorotBeam, ASS, FinEtools.NodalFieldModule.NodalField{Float64}, FinEtools.NodalFieldModule.NodalField{T}, FinEtools.NodalFieldModule.NodalField{T}, FinEtools.NodalFieldModule.NodalField{TI}}} where {ASS<:FinEtools.AssemblyModule.AbstractSysmatAssembler, T<:Number, TI<:Number}","page":"Functions","title":"FinEtoolsFlexStructures.FEMMCorotBeamModule.geostiffness","text":"geostiffness(self::FEMMCorotBeam, assembler::ASS, geom0::NodalField{FFlt}, u1::NodalField{T}, Rfield1::NodalField{T}, dchi::NodalField{T}) where {ASS<:AbstractSysmatAssembler, T<:Number}\n\nCompute the geometric stiffness matrix.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.FEMMCorotBeamModule.gyroscopic-Union{Tuple{TI}, Tuple{T}, Tuple{ASS}, Tuple{FinEtoolsFlexStructures.FEMMCorotBeamModule.FEMMCorotBeam, ASS, FinEtools.NodalFieldModule.NodalField{Float64}, FinEtools.NodalFieldModule.NodalField{T}, FinEtools.NodalFieldModule.NodalField{T}, FinEtools.NodalFieldModule.NodalField{T}, FinEtools.NodalFieldModule.NodalField{TI}}} where {ASS<:FinEtools.AssemblyModule.AbstractSysmatAssembler, T<:Number, TI<:Number}","page":"Functions","title":"FinEtoolsFlexStructures.FEMMCorotBeamModule.gyroscopic","text":"gyroscopic(self::FEMMCorotBeam,  assembler::A,\n  geom::NodalField{FFlt},\n  u::NodalField{T}) where {A<:AbstractSysmatAssembler, T<:Number}\n\nCompute the quadratic-inertial-term (gyroscopic) mass matrix\n\nThis is a general routine for the abstract linear-deformation  FEMM.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.FEMMCorotBeamModule.local_cartesian_to_natural!-Tuple{Any, Any}","page":"Functions","title":"FinEtoolsFlexStructures.FEMMCorotBeamModule.local_cartesian_to_natural!","text":"local_cartesian_to_natural!(aN, L)\n\nCompute transformation from local Cartesian displacements to natural deformations of a beam element.\n\nMatrix defined in Eq (4.8) of COMPUTER  METHODS  IN APPLIED  MECHANICS  AND  ENGINEERING   14  (1978)  401-451 ON LARGE  DISPLACEMENT-SMALL   STRAIN  ANALYSIS   OF  STRUCTURES WITH  ROTATIONAL   DEGREES  OF  FREEDOM. J.H.  ARGYRIS,   P.C.  DUNNE  and  D.W. SCHARPF\n\nArguments\n\nL= current length of the element\n\nOutputs\n\naN= transformation matrix to take Cartesian (local) displacement increments in the      element frame and to produce increments of natural deformations;      see local_frame_and_def! for the definition of the natural deformations\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.FEMMCorotBeamModule.local_forces!-NTuple{4, Any}","page":"Functions","title":"FinEtoolsFlexStructures.FEMMCorotBeamModule.local_forces!","text":"local_forces!(FL, PN, L, aN)\n\nCompute forces through which the element acts on the nodes in the local coordinate system.\n\nArguments\n\nPN = column vector of natural forces; L= current length of the element, aN= transformation matrix to take Cartesian (local) displacement increments in the      element frame and to produce increments of natural deformations;      see local_frame_and_def! for the definition of the natural deformations\n\nOutputs\n\nFL = vector of forces acting on the nodes in the local coordinate system\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.FEMMCorotBeamModule.local_frame_and_def!-NTuple{10, Any}","page":"Functions","title":"FinEtoolsFlexStructures.FEMMCorotBeamModule.local_frame_and_def!","text":"local_frame_and_def!(Ft, dN, F0, FtI, FtJ, x0, x1x2_vector, xt, RI, RJ)\n\nCompute the current length of the element, the current element frame, and the natural deformations\n\nArguments\n\nx0= array of node coordinates, one node per row, in initial configuration x1x2_vector= vector that lies in the x1-x2 local element coordinate      plane, in initial configuration xt= array of node coordinates, one node per row, in initial configuration RI,RJ=nodal rotation (orthogonal) matrix\n\nOutputs\n\nLt= current length of the element, Ft= current element frame (orthogonal rotation matrix) whose columns are unit      vectors: they are centered halfway between the current locations of      the nodes, vector 1 points from node I to node J, vector 3 is      orthogonal to the sum of the nodal cross-section frame vectors 2 dN= vector of natural deformations; dN(1)= total change in length      between configurations 0 and t; dN(2)= symmetric bending;      dN(3)= anti-symmetric bending;    dN(4)= symmetric bending      dN(5)= anti-symmetric bending; dN(6)=total axial torsion angle.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.FEMMCorotBeamModule.local_geometric_stiffness!-NTuple{6, Any}","page":"Functions","title":"FinEtoolsFlexStructures.FEMMCorotBeamModule.local_geometric_stiffness!","text":"local_geometric_stiffness!(SM, A, I2, I3, PN, L)\n\nCompute the local geometric stiffness matrix.\n\nArguments\n\nA= cross-sectional area, I2, I3=central moment of inertia of the cross-section about the x2 and x3 coordinate axis, PN= vector of natural forces; see natural_forces() for definitions L= current length of the element,\n\nOutputs\n\nSM = local geometric stiffness matrix, 12 x 12\n\nThis geometric stiffness matrix this consistent with relationship between the natural deformations and the natural forces that assumes there is only a linear constitutive link: no non-constitutive effects (bowing etc.) are included. This form of the geometric matrix was derived by Krenk. @BOOK{Krenk:2009,   AUTHOR =       {S. Krenk},   TITLE =        {Non-linear Modeling and Analysis of Solids and Structures },   PUBLISHER =    {Cambridge University Press},   YEAR =         {2009},   isbn =         {9780521830546} }\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.FEMMCorotBeamModule.local_mass!-NTuple{8, Any}","page":"Functions","title":"FinEtoolsFlexStructures.FEMMCorotBeamModule.local_mass!","text":"local_mass!(MM, A, I1, I2, I3, rho, L, mass_type)\n\nMass matrix of the beam.\n\nArguments\n\nA= cross-sectional area, I1=central moment of inertia of the cross-section about the x1 axis, I2, I3=central moment of inertia of the cross-section about the x2 and x3 coordinate axis, rho=mass density, L= initial length of the element,\n\nOutputs\n\nMM = local mass matrix, 12 x 12 In the element frame the mass matrix is constant.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.FEMMCorotBeamModule.local_stiffness!-NTuple{12, Any}","page":"Functions","title":"FinEtoolsFlexStructures.FEMMCorotBeamModule.local_stiffness!","text":"local_stiffness!(SM, E, G, A, I2, I3, J, A2s, A3s, L, aN, DN)\n\nCompute the local elastic stiffness matrix.\n\nArguments\n\nE, G= Young's and shear modulus, A= cross-sectional area, I2, I3=central moment of inertia of the cross-section about the x2 and x3 coordinate axis, J=St Venant torsion constant, L= current length of the element,\n\nOutputs\n\nSM = local stiffness matrix, 12 x 12\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.FEMMCorotBeamModule.mass-Union{Tuple{TI}, Tuple{T}, Tuple{ASS}, Tuple{FinEtoolsFlexStructures.FEMMCorotBeamModule.FEMMCorotBeam, ASS, FinEtools.NodalFieldModule.NodalField{Float64}, FinEtools.NodalFieldModule.NodalField{T}, FinEtools.NodalFieldModule.NodalField{T}, FinEtools.NodalFieldModule.NodalField{TI}}} where {ASS<:FinEtools.AssemblyModule.AbstractSysmatAssembler, T<:Number, TI<:Number}","page":"Functions","title":"FinEtoolsFlexStructures.FEMMCorotBeamModule.mass","text":"mass(self::FEMMCorotBeam,  assembler::A,\n  geom::NodalField{FFlt},\n  u::NodalField{T}) where {A<:AbstractSysmatAssembler, T<:Number}\n\nCompute the consistent mass matrix\n\nThis is a general routine for the abstract linear-deformation  FEMM.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.FEMMCorotBeamModule.natural_forces!-NTuple{12, Any}","page":"Functions","title":"FinEtoolsFlexStructures.FEMMCorotBeamModule.natural_forces!","text":"natural_forces!(PN, E, G, A, I2, I3, J, A2s, A3s, L, dN, DN)\n\nCompute the natural forces from the natural deformations.\n\nArgument\n\nE, G= Young's and shear modulus, A= cross-sectional area, I2, I3=central moment of inertia of the cross-section about the x2 and x3 coordinate axis, J=St Venant torsion constant, L= current length of the element, dN= column vector of natural deformations; see local_frames()\n\nOutputs\n\nPN = column vector of natural forces;      PN[1]= axial force;      PN[2]= symmetric bending moment in the plane x1-x2;      PN[3]= anti-symmetric bending bending moment in the plane x1-x2;      PN[4]= symmetric bending bending moment in the plane x1-x3;      PN[5]= anti-symmetric bending bending moment in the plane x1-x3;      PN[6]= axial torque.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.FEMMCorotBeamModule.natural_stiffness_Bernoulli!-NTuple{10, Any}","page":"Functions","title":"FinEtoolsFlexStructures.FEMMCorotBeamModule.natural_stiffness_Bernoulli!","text":"natural_stiffness_Bernoulli!(DN, E, G, A, I2, I3, J, A2s, A3s, L)\n\nCompute the natural stiffness matrix.\n\nfunction DN = natural_stiffness(self, E, G, A, I2, I3, J, L)\n\nArguments\n\nE, G= Young's and shear modulus,\nA= cross-sectional area,\nI2, I3= central moment of inertia of the cross-section about the x2 and x3 coordinate axis,\nJ= St Venant torsion constant,\nA2s = effective area for shear in the direction of x2 (ignored)\nA3s = effective area for shear in the direction of x3 (ignored)\nL= current length of the element,\n\nOutputs\n\nDN = 6 x 6 natural stiffness matrix\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.FEMMCorotBeamModule.natural_stiffness_Timoshenko!-NTuple{10, Any}","page":"Functions","title":"FinEtoolsFlexStructures.FEMMCorotBeamModule.natural_stiffness_Timoshenko!","text":"natural_stiffness_Timoshenko!(DN, E, G, A, I2, I3, J, A2s, A3s, L)\n\nCompute the natural stiffness matrix.\n\nfunction DN = natural_stiffness(self, E, G, A, I2, I3, J, L)\n\nArguments\n\nE, G= Young's and shear modulus,\nA= cross-sectional area,\nI2, I3= central moment of inertia of the cross-section about the x2 and x3 coordinate axis,\nJ= St Venant torsion constant,\nA2s = effective area for shear in the direction of x2\nA3s = effective area for shear in the direction of x3\nL= current length of the element,\n\nOutputs\n\nDN = 6 x 6 natural stiffness matrix\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.FEMMCorotBeamModule.restoringforce-Union{Tuple{TI}, Tuple{T}, Tuple{ASS}, Tuple{FinEtoolsFlexStructures.FEMMCorotBeamModule.FEMMCorotBeam, ASS, FinEtools.NodalFieldModule.NodalField{Float64}, FinEtools.NodalFieldModule.NodalField{T}, FinEtools.NodalFieldModule.NodalField{T}, FinEtools.NodalFieldModule.NodalField{TI}}} where {ASS<:FinEtools.AssemblyModule.AbstractSysvecAssembler, T<:Number, TI<:Number}","page":"Functions","title":"FinEtoolsFlexStructures.FEMMCorotBeamModule.restoringforce","text":"restoringforce(self::FEMMCorotBeam, assembler::ASS, geom0::NodalField{FFlt}, u1::NodalField{T}, Rfield1::NodalField{T}, dchi::NodalField{T}) where {ASS<:AbstractSysmatAssembler, T<:Number}\n\nCompute the vector of the restoring elastic forces\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.FEMMCorotBeamModule.stiffness-Union{Tuple{TI}, Tuple{T}, Tuple{ASS}, Tuple{FinEtoolsFlexStructures.FEMMCorotBeamModule.FEMMCorotBeam, ASS, FinEtools.NodalFieldModule.NodalField{Float64}, FinEtools.NodalFieldModule.NodalField{T}, FinEtools.NodalFieldModule.NodalField{T}, FinEtools.NodalFieldModule.NodalField{TI}}} where {ASS<:FinEtools.AssemblyModule.AbstractSysmatAssembler, T<:Number, TI<:Number}","page":"Functions","title":"FinEtoolsFlexStructures.FEMMCorotBeamModule.stiffness","text":"stiffness(self::FEMMCorotBeam, assembler::ASS, geom0::NodalField{FFlt}, u1::NodalField{T}, Rfield1::NodalField{T}, dchi::NodalField{T}) where {ASS<:AbstractSysmatAssembler, T<:Number}\n\nCompute the material stiffness matrix.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FEMMLinBeamModule-functions","page":"Functions","title":"FEMMLinBeamModule functions","text":"","category":"section"},{"location":"man/functions.html","page":"Functions","title":"Functions","text":"Modules = [FinEtoolsFlexStructures.FEMMLinBeamModule]\nPrivate = true\nOrder = [:function]","category":"page"},{"location":"man/functions.html#FinEtools.FEMMBaseModule.inspectintegpoints-Union{Tuple{F}, Tuple{IT}, Tuple{FT}, Tuple{FEMM}, Tuple{FEMM, FinEtools.NodalFieldModule.NodalField{FT}, FinEtools.NodalFieldModule.NodalField{FT}, FinEtools.NodalFieldModule.NodalField{FT}, AbstractVector{IT}, F, Any}, Tuple{FEMM, FinEtools.NodalFieldModule.NodalField{FT}, FinEtools.NodalFieldModule.NodalField{FT}, FinEtools.NodalFieldModule.NodalField{FT}, AbstractVector{IT}, F, Any, Any}} where {FEMM<:FinEtoolsFlexStructures.FEMMLinBeamModule.FEMMLinBeam, FT, IT, F<:Function}","page":"Functions","title":"FinEtools.FEMMBaseModule.inspectintegpoints","text":"inspectintegpoints(\n    self::FEMM,\n    geom::NodalField{FT},\n    felist::AbstractVector{IT},\n    inspector::F,\n    idat,\n    quantity = :Cauchy;\n    context...,\n) where {FEMM<:AbstractFEMM, FT, IT, F<:Function}\n\nInspect integration points.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.FEMMLinBeamModule.distribloads_global-Union{Tuple{TI}, Tuple{T}, Tuple{ASS}, Tuple{FinEtoolsFlexStructures.FEMMLinBeamModule.FEMMLinBeam, ASS, FinEtools.NodalFieldModule.NodalField{Float64}, FinEtools.NodalFieldModule.NodalField{T}, FinEtools.NodalFieldModule.NodalField{T}, FinEtools.NodalFieldModule.NodalField{TI}, Any}} where {ASS<:FinEtools.AssemblyModule.AbstractSysvecAssembler, T<:Number, TI<:Number}","page":"Functions","title":"FinEtoolsFlexStructures.FEMMLinBeamModule.distribloads_global","text":"distribloads_global(self::FEMMLinBeam, geom0::NodalField{FFlt}, u1::NodalField{T}, Rfield1::NodalField{T}, dchi::NodalField{T}, fi) where {T<:Number}\n\nCompute the load vector due to distributed loads.\n\nCompute the global load vector corresponding to applied distributed load. Here it means force per unit length of the beam, in the configuration u1, Rfield1. These are only forces, not moments.\n\nnote: Note\nThe force intensity must be uniform across the entire element. The force intensity is given in the global coordinates.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.FEMMLinBeamModule.local_cartesian_to_natural!-Tuple{Any, Any}","page":"Functions","title":"FinEtoolsFlexStructures.FEMMLinBeamModule.local_cartesian_to_natural!","text":"local_cartesian_to_natural!(aN, L)\n\nCompute transformation from local Cartesian displacements to natural deformations of a beam element.\n\nMatrix defined in Eq (4.8) of COMPUTER  METHODS  IN APPLIED  MECHANICS  AND  ENGINEERING   14  (1978)  401-451 ON LARGE  DISPLACEMENT-SMALL   STRAIN  ANALYSIS   OF  STRUCTURES WITH  ROTATIONAL   DEGREES  OF  FREEDOM. J.H.  ARGYRIS,   P.C.  DUNNE  and  D.W. SCHARPF\n\nArguments\n\nL= current length of the element\n\nOutputs\n\naN= transformation matrix to take Cartesian (local) displacement increments in the      element frame and to produce increments of natural deformations;      see local_frame_and_def! for the definition of the natural deformations\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.FEMMLinBeamModule.local_forces!-NTuple{4, Any}","page":"Functions","title":"FinEtoolsFlexStructures.FEMMLinBeamModule.local_forces!","text":"local_forces!(FL, PN, L, aN)\n\nCompute forces through which the element acts on the nodes in the local coordinate system.\n\nArguments\n\nPN = column vector of natural forces; L= current length of the element, aN= transformation matrix to take Cartesian (local) displacement increments in the      element frame and to produce increments of natural deformations;      see local_frame_and_def! for the definition of the natural deformations\n\nOutputs\n\nFL = vector of forces acting on the nodes in the local coordinate system\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.FEMMLinBeamModule.local_mass!-NTuple{8, Any}","page":"Functions","title":"FinEtoolsFlexStructures.FEMMLinBeamModule.local_mass!","text":"local_mass!(MM, A, I1, I2, I3, rho, L, mass_type)\n\nMass matrix of the beam.\n\nArguments\n\nA= cross-sectional area, I1=central moment of inertia of the cross-section about the x1 axis, I2, I3=central moment of inertia of the cross-section about the x2 and x3 coordinate axis, rho=mass density, L= initial length of the element,\n\nOutputs\n\nMM = local mass matrix, 12 x 12 In the element frame the mass matrix is constant.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.FEMMLinBeamModule.local_stiffness!-NTuple{12, Any}","page":"Functions","title":"FinEtoolsFlexStructures.FEMMLinBeamModule.local_stiffness!","text":"local_stiffness!(SM, E, G, A, I2, I3, J, A2s, A3s, L, aN, DN)\n\nCompute the local elastic stiffness matrix.\n\nArguments\n\nE, G= Young's and shear modulus, A= cross-sectional area, I2, I3=central moment of inertia of the cross-section about the x2 and x3 coordinate axis, J=St Venant torsion constant, L= current length of the element,\n\nOutputs\n\nSM = local stiffness matrix, 12 x 12\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.FEMMLinBeamModule.mass-Union{Tuple{TI}, Tuple{T}, Tuple{ASS}, Tuple{FinEtoolsFlexStructures.FEMMLinBeamModule.FEMMLinBeam, ASS, FinEtools.NodalFieldModule.NodalField{Float64}, FinEtools.NodalFieldModule.NodalField{T}, FinEtools.NodalFieldModule.NodalField{T}, FinEtools.NodalFieldModule.NodalField{TI}}} where {ASS<:FinEtools.AssemblyModule.AbstractSysmatAssembler, T<:Number, TI<:Number}","page":"Functions","title":"FinEtoolsFlexStructures.FEMMLinBeamModule.mass","text":"mass(self::FEMMLinBeam,  assembler::A,\n  geom::NodalField{FFlt},\n  u::NodalField{T}) where {A<:AbstractSysmatAssembler, T<:Number}\n\nCompute the consistent mass matrix\n\nThis is a general routine for the abstract linear-deformation  FEMM.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.FEMMLinBeamModule.natural_forces!-NTuple{12, Any}","page":"Functions","title":"FinEtoolsFlexStructures.FEMMLinBeamModule.natural_forces!","text":"natural_forces!(PN, E, G, A, I2, I3, J, A2s, A3s, L, dN, DN)\n\nCompute the natural forces from the natural deformations.\n\nArgument\n\nE, G= Young's and shear modulus, A= cross-sectional area, I2, I3=central moment of inertia of the cross-section about the x2 and x3 coordinate axis, J=St Venant torsion constant, L= current length of the element, dN= column vector of natural deformations; see local_frames()\n\nOutputs\n\nPN = column vector of natural forces;      PN[1]= axial force;      PN[2]= symmetric bending moment in the plane x1-x2;      PN[3]= anti-symmetric bending bending moment in the plane x1-x2;      PN[4]= symmetric bending bending moment in the plane x1-x3;      PN[5]= anti-symmetric bending bending moment in the plane x1-x3;      PN[6]= axial torque.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.FEMMLinBeamModule.natural_stiffness_Bernoulli!-NTuple{10, Any}","page":"Functions","title":"FinEtoolsFlexStructures.FEMMLinBeamModule.natural_stiffness_Bernoulli!","text":"natural_stiffness_Bernoulli!(DN, E, G, A, I2, I3, J, A2s, A3s, L)\n\nCompute the natural stiffness matrix.\n\nfunction DN = natural_stiffness(self, E, G, A, I2, I3, J, L)\n\nArguments\n\nE, G= Young's and shear modulus,\nA= cross-sectional area,\nI2, I3= central moment of inertia of the cross-section about the x2 and x3 coordinate axis,\nJ= St Venant torsion constant,\nA2s = effective area for shear in the direction of x2 (ignored)\nA3s = effective area for shear in the direction of x3 (ignored)\nL= current length of the element,\n\nOutputs\n\nDN = 6 x 6 natural stiffness matrix\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.FEMMLinBeamModule.natural_stiffness_Timoshenko!-NTuple{10, Any}","page":"Functions","title":"FinEtoolsFlexStructures.FEMMLinBeamModule.natural_stiffness_Timoshenko!","text":"natural_stiffness_Timoshenko!(DN, E, G, A, I2, I3, J, A2s, A3s, L)\n\nCompute the natural stiffness matrix.\n\nfunction DN = natural_stiffness(self, E, G, A, I2, I3, J, L)\n\nArguments\n\nE, G= Young's and shear modulus,\nA= cross-sectional area,\nI2, I3= central moment of inertia of the cross-section about the x2 and x3 coordinate axis,\nJ= St Venant torsion constant,\nA2s = effective area for shear in the direction of x2\nA3s = effective area for shear in the direction of x3\nL= current length of the element,\n\nOutputs\n\nDN = 6 x 6 natural stiffness matrix\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.FEMMLinBeamModule.stiffness-Union{Tuple{TI}, Tuple{T}, Tuple{ASS}, Tuple{FinEtoolsFlexStructures.FEMMLinBeamModule.FEMMLinBeam, ASS, FinEtools.NodalFieldModule.NodalField{Float64}, FinEtools.NodalFieldModule.NodalField{T}, FinEtools.NodalFieldModule.NodalField{T}, FinEtools.NodalFieldModule.NodalField{TI}}} where {ASS<:FinEtools.AssemblyModule.AbstractSysmatAssembler, T<:Number, TI<:Number}","page":"Functions","title":"FinEtoolsFlexStructures.FEMMLinBeamModule.stiffness","text":"stiffness(self::FEMMLinBeam, assembler::ASS, geom0::NodalField{FFlt}, u1::NodalField{T}, Rfield1::NodalField{T}, dchi::NodalField{T}) where {ASS<:AbstractSysmatAssembler, T<:Number}\n\nCompute the material stiffness matrix.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FEMMRITBeamModule-functions","page":"Functions","title":"FEMMRITBeamModule functions","text":"","category":"section"},{"location":"man/functions.html","page":"Functions","title":"Functions","text":"Modules = [FinEtoolsFlexStructures.FEMMRITBeamModule]\nPrivate = true\nOrder = [:function]","category":"page"},{"location":"man/functions.html#FinEtoolsFlexStructures.FEMMRITBeamModule.distribloads_global-Union{Tuple{TI}, Tuple{T}, Tuple{ASS}, Tuple{FinEtoolsFlexStructures.FEMMRITBeamModule.FEMMRITBeam, ASS, FinEtools.NodalFieldModule.NodalField{Float64}, FinEtools.NodalFieldModule.NodalField{T}, FinEtools.NodalFieldModule.NodalField{T}, FinEtools.NodalFieldModule.NodalField{TI}, Any}} where {ASS<:FinEtools.AssemblyModule.AbstractSysvecAssembler, T<:Number, TI<:Number}","page":"Functions","title":"FinEtoolsFlexStructures.FEMMRITBeamModule.distribloads_global","text":"distribloads_global(self::FEMMRITBeam, geom0::NodalField{FFlt}, u1::NodalField{T}, Rfield1::NodalField{T}, dchi::NodalField{T}, fi) where {T<:Number}\n\nCompute the load vector due to distributed loads.\n\nCompute the global load vector corresponding to applied distributed load. Here it means force per unit length of the beam, in the configuration u1, Rfield1. These are only forces, not moments.\n\nnote: Note\nThe force intensity must be uniform across the entire element. The force intensity is given in the global coordinates.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.FEMMRITBeamModule.stiffness-Union{Tuple{TI}, Tuple{T}, Tuple{ASS}, Tuple{FinEtoolsFlexStructures.FEMMRITBeamModule.FEMMRITBeam, ASS, FinEtools.NodalFieldModule.NodalField{Float64}, FinEtools.NodalFieldModule.NodalField{T}, FinEtools.NodalFieldModule.NodalField{T}, FinEtools.NodalFieldModule.NodalField{TI}}} where {ASS<:FinEtools.AssemblyModule.AbstractSysmatAssembler, T<:Number, TI<:Number}","page":"Functions","title":"FinEtoolsFlexStructures.FEMMRITBeamModule.stiffness","text":"stiffness(self::FEMMRITBeam, assembler::ASS, geom0::NodalField{FFlt}, u1::NodalField{T}, Rfield1::NodalField{T}, dchi::NodalField{T}) where {ASS<:AbstractSysmatAssembler, T<:Number}\n\nCompute the material stiffness matrix.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FEMMShellT3FFModule-functions","page":"Functions","title":"FEMMShellT3FFModule functions","text":"","category":"section"},{"location":"man/functions.html","page":"Functions","title":"Functions","text":"Modules = [FinEtoolsFlexStructures.FEMMShellT3FFModule]\nPrivate = true\nOrder = [:function]","category":"page"},{"location":"man/functions.html#FinEtools.FEMMBaseModule.associategeometry!-Tuple{FinEtoolsFlexStructures.FEMMShellT3FFModule.FEMMShellT3FF, FinEtools.NodalFieldModule.NodalField{Float64}}","page":"Functions","title":"FinEtools.FEMMBaseModule.associategeometry!","text":"associategeometry!(self::FEMMShellT3FF,  geom::NodalField{FFlt})\n\nAssociate geometry with the FEMM. \n\nIn this case it means evaluate the nodal normals.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtools.FEMMBaseModule.inspectintegpoints-Union{Tuple{F}, Tuple{TI}, Tuple{FinEtoolsFlexStructures.FEMMShellT3FFModule.FEMMShellT3FF, FinEtools.NodalFieldModule.NodalField{Float64}, FinEtools.NodalFieldModule.NodalField{TI}, FinEtools.NodalFieldModule.NodalField{Float64}, Vector{Int64}, F, Any}, Tuple{FinEtoolsFlexStructures.FEMMShellT3FFModule.FEMMShellT3FF, FinEtools.NodalFieldModule.NodalField{Float64}, FinEtools.NodalFieldModule.NodalField{TI}, FinEtools.NodalFieldModule.NodalField{Float64}, Vector{Int64}, F, Any, Any}} where {TI<:Number, F<:Function}","page":"Functions","title":"FinEtools.FEMMBaseModule.inspectintegpoints","text":"inspectintegpoints(self::AbstractFEMMDeforLinear,\n  geom::NodalField{FFlt},  u::NodalField{TI},\n  dT::NodalField{FFlt},\n  felist::FIntVec,\n  inspector::F,  idat, quantity=:Cauchy;\n  context...) where {TI<:Number, F<:Function}\n\nInspect integration point quantities.\n\ngeom - reference geometry field\nu - displacement+rotation field\ndT - temperature difference field\nfelist - indexes of the finite elements that are to be inspected:    The fes to be included are: fes[felist].\ncontext    - structure: see the update!() method of the material.\ninspector - function with the signature       idat = inspector(idat, j, conn, x, out, loc);  where   idat - a structure or an array that the inspector may          use to maintain some state,  for instance minimum or maximum of          stress, j is the element number, conn is the element connectivity,          out is the output of the update!() method,  loc is the location          of the integration point in the reference configuration.\n\nReturn\n\nThe updated inspector data is returned.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.FEMMShellT3FFModule.make-Tuple{Any, Any, Any}","page":"Functions","title":"FinEtoolsFlexStructures.FEMMShellT3FFModule.make","text":"make(integdomain, mcsys, material)\n\nMake a T3FF FEMM from the integration domain, a coordinate system to define the orientation of the normals, and a material.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.FEMMShellT3FFModule.make-Tuple{Any, Any}","page":"Functions","title":"FinEtoolsFlexStructures.FEMMShellT3FFModule.make","text":"make(integdomain, mcsys, material)\n\nMake a T3FF FEMM from the integration domain,  and a material. Default isoparametric method for computing the normals is used.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.FEMMShellT3FFModule.mass-Union{Tuple{TI}, Tuple{A}, Tuple{FinEtoolsFlexStructures.FEMMShellT3FFModule.FEMMShellT3FF, A, FinEtools.NodalFieldModule.NodalField{Float64}, FinEtools.NodalFieldModule.NodalField{TI}}} where {A<:FinEtools.AssemblyModule.AbstractSysmatAssembler, TI<:Number}","page":"Functions","title":"FinEtoolsFlexStructures.FEMMShellT3FFModule.mass","text":"mass(self::FEMMShellT3FF,  assembler::A,  geom::NodalField{FFlt}, dchi::NodalField{TI}) where {A<:AbstractSysmatAssembler, TI<:Number}\n\nCompute the diagonal (lumped) mass matrix\n\nThe mass matrix can be expected to be non-singular.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.FEMMShellT3FFModule.num_normals-Tuple{FinEtoolsFlexStructures.FEMMShellT3FFModule.FEMMShellT3FF}","page":"Functions","title":"FinEtoolsFlexStructures.FEMMShellT3FFModule.num_normals","text":"num_normals(self::FEMMShellT3FF)\n\nCompute the summary of the nodal normals.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.FEMMShellT3FFModule.stiffness-Union{Tuple{TI}, Tuple{ASS}, Tuple{FinEtoolsFlexStructures.FEMMShellT3FFModule.FEMMShellT3FF, ASS, FinEtools.NodalFieldModule.NodalField{Float64}, FinEtools.NodalFieldModule.NodalField{TI}, FinEtools.NodalFieldModule.NodalField{TI}, FinEtools.NodalFieldModule.NodalField{TI}}} where {ASS<:FinEtools.AssemblyModule.AbstractSysmatAssembler, TI<:Number}","page":"Functions","title":"FinEtoolsFlexStructures.FEMMShellT3FFModule.stiffness","text":"stiffness(self::FEMMShellT3FF, assembler::ASS, geom0::NodalField{FFlt}, u1::NodalField{TI}, Rfield1::NodalField{TI}, dchi::NodalField{TI}) where {ASS<:AbstractSysmatAssembler, TI<:Number}\n\nCompute the material stiffness matrix.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FEMMShellT3FFCompModule-functions","page":"Functions","title":"FEMMShellT3FFCompModule functions","text":"","category":"section"},{"location":"man/functions.html","page":"Functions","title":"Functions","text":"Modules = [FinEtoolsFlexStructures.FEMMShellT3FFCompModule]\nPrivate = true\nOrder = [:function]","category":"page"},{"location":"man/functions.html#FinEtools.FEMMBaseModule.associategeometry!-Tuple{FinEtoolsFlexStructures.FEMMShellT3FFCompModule.FEMMShellT3FFComp, FinEtools.NodalFieldModule.NodalField{Float64}}","page":"Functions","title":"FinEtools.FEMMBaseModule.associategeometry!","text":"associategeometry!(self::FEMMShellT3FFComp,  geom::NodalField{FFlt})\n\nAssociate geometry with the FEMM. \n\nIn this case it means evaluate the nodal normals.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtools.FEMMBaseModule.inspectintegpoints-Union{Tuple{F}, Tuple{TI}, Tuple{FinEtoolsFlexStructures.FEMMShellT3FFCompModule.FEMMShellT3FFComp, FinEtools.NodalFieldModule.NodalField{Float64}, FinEtools.NodalFieldModule.NodalField{TI}, FinEtools.NodalFieldModule.NodalField{Float64}, Vector{Int64}, F, Any}, Tuple{FinEtoolsFlexStructures.FEMMShellT3FFCompModule.FEMMShellT3FFComp, FinEtools.NodalFieldModule.NodalField{Float64}, FinEtools.NodalFieldModule.NodalField{TI}, FinEtools.NodalFieldModule.NodalField{Float64}, Vector{Int64}, F, Any, Any}} where {TI<:Number, F<:Function}","page":"Functions","title":"FinEtools.FEMMBaseModule.inspectintegpoints","text":"inspectintegpoints(self::AbstractFEMMDeforLinear,\n  geom::NodalField{FFlt},  u::NodalField{TI},\n  dT::NodalField{FFlt},\n  felist::FIntVec,\n  inspector::F,  idat, quantity=:Cauchy;\n  context...) where {TI<:Number, F<:Function}\n\nInspect integration point quantities.\n\ngeom - reference geometry field\nu - displacement+rotation field\ndT - temperature difference field\nfelist - indexes of the finite elements that are to be inspected:    The fes to be included are: fes[felist].\ncontext    - structure: see the update!() method of the material.\ninspector - function with the signature       idat = inspector(idat, j, conn, x, out, loc);  where   idat - a structure or an array that the inspector may          use to maintain some state,  for instance minimum or maximum of          stress, j is the element number, conn is the element connectivity,          out is the output of the update!() method,  loc is the location          of the integration point in the reference configuration.\n\nReturn\n\nThe updated inspector data is returned.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.FEMMShellT3FFCompModule.make-Tuple{Any, Any}","page":"Functions","title":"FinEtoolsFlexStructures.FEMMShellT3FFCompModule.make","text":"make(integdomain, layup)\n\nMake a T3FFComp FEMM from the integration domain and a composite layup.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.FEMMShellT3FFCompModule.mass-Union{Tuple{TI}, Tuple{A}, Tuple{FinEtoolsFlexStructures.FEMMShellT3FFCompModule.FEMMShellT3FFComp, A, FinEtools.NodalFieldModule.NodalField{Float64}, FinEtools.NodalFieldModule.NodalField{TI}}} where {A<:FinEtools.AssemblyModule.AbstractSysmatAssembler, TI<:Number}","page":"Functions","title":"FinEtoolsFlexStructures.FEMMShellT3FFCompModule.mass","text":"mass(self::FEMMShellT3FFComp,  assembler::A,  geom::NodalField{FFlt}, dchi::NodalField{TI}) where {A<:AbstractSysmatAssembler, TI<:Number}\n\nCompute the diagonal (lumped) mass matrix\n\nThe mass matrix can be expected to be non-singular.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.FEMMShellT3FFCompModule.num_normals-Tuple{FinEtoolsFlexStructures.FEMMShellT3FFCompModule.FEMMShellT3FFComp}","page":"Functions","title":"FinEtoolsFlexStructures.FEMMShellT3FFCompModule.num_normals","text":"num_normals(self::FEMMShellT3FFComp)\n\nCompute the summary of the nodal normals.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FinEtoolsFlexStructures.FEMMShellT3FFCompModule.stiffness-Union{Tuple{TI}, Tuple{ASS}, Tuple{FinEtoolsFlexStructures.FEMMShellT3FFCompModule.FEMMShellT3FFComp, ASS, FinEtools.NodalFieldModule.NodalField{Float64}, FinEtools.NodalFieldModule.NodalField{TI}, FinEtools.NodalFieldModule.NodalField{TI}, FinEtools.NodalFieldModule.NodalField{TI}}} where {ASS<:FinEtools.AssemblyModule.AbstractSysmatAssembler, TI<:Number}","page":"Functions","title":"FinEtoolsFlexStructures.FEMMShellT3FFCompModule.stiffness","text":"stiffness(self::FEMMShellT3FFComp, assembler::ASS, geom0::NodalField{FFlt}, u1::NodalField{TI}, Rfield1::NodalField{TI}, dchi::NodalField{TI}) where {ASS<:AbstractSysmatAssembler, TI<:Number}\n\nCompute the material stiffness matrix.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FEMMPointMassModule-functions","page":"Functions","title":"FEMMPointMassModule functions","text":"","category":"section"},{"location":"man/functions.html","page":"Functions","title":"Functions","text":"Modules = [FinEtoolsFlexStructures.FEMMPointMassModule]\nPrivate = true\nOrder = [:function]","category":"page"},{"location":"man/functions.html#FinEtoolsFlexStructures.FEMMPointMassModule.mass-Union{Tuple{TI}, Tuple{T}, Tuple{ASS}, Tuple{FinEtoolsFlexStructures.FEMMPointMassModule.FEMMPointMass, ASS, FinEtools.NodalFieldModule.NodalField{Float64}, FinEtools.NodalFieldModule.NodalField{T}, FinEtools.NodalFieldModule.NodalField{T}, FinEtools.NodalFieldModule.NodalField{TI}}} where {ASS<:FinEtools.AssemblyModule.AbstractSysmatAssembler, T<:Number, TI<:Number}","page":"Functions","title":"FinEtoolsFlexStructures.FEMMPointMassModule.mass","text":"mass(self::FEMMCorotBeam,  assembler::A,\n  geom::NodalField{FFlt},\n  u::NodalField{T}) where {A<:AbstractSysmatAssembler, T<:Number}\n\nCompute the consistent mass matrix\n\nThis is a general routine for the abstract linear-deformation  FEMM.\n\n\n\n\n\n","category":"method"},{"location":"man/functions.html#FEMMPointGroundedSpringModule-functions","page":"Functions","title":"FEMMPointGroundedSpringModule functions","text":"","category":"section"},{"location":"man/functions.html","page":"Functions","title":"Functions","text":"Modules = [FinEtoolsFlexStructures.FEMMPointGroundedSpringModule]\nPrivate = true\nOrder = [:function]","category":"page"},{"location":"man/functions.html#FinEtoolsFlexStructures.FEMMPointGroundedSpringModule.stiffness-Union{Tuple{TI}, Tuple{T}, Tuple{ASS}, Tuple{FinEtoolsFlexStructures.FEMMPointGroundedSpringModule.FEMMPointGroundedSpring, ASS, FinEtools.NodalFieldModule.NodalField{Float64}, FinEtools.NodalFieldModule.NodalField{T}, FinEtools.NodalFieldModule.NodalField{T}, FinEtools.NodalFieldModule.NodalField{TI}}} where {ASS<:FinEtools.AssemblyModule.AbstractSysmatAssembler, T<:Number, TI<:Number}","page":"Functions","title":"FinEtoolsFlexStructures.FEMMPointGroundedSpringModule.stiffness","text":"mass(self::FEMMCorotBeam,  assembler::A,\n  geom::NodalField{FFlt},\n  u::NodalField{T}) where {A<:AbstractSysmatAssembler, T<:Number}\n\nCompute the stiffness matrix\n\n\n\n\n\n","category":"method"}]
}
